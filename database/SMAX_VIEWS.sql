CREATE OR REPLACE VIEW VW_PARENT AS
  SELECT
    A.FAMILY_ID,
    A.DATE_OF_BIRTH AS DOB,
    A.SSN,
    A.GENDER,
    A.FIRST_NAME,
    A.LAST_NAME,
    A.HOUSE_HEAD_NUMBER,
    A.HOUSE_HEAD_ID,
    C.RELATION_CD,
    C.STUDENT_ID,
    D.PRIMARY_FAMILY_IND,
    D.LIVES_WITH_IND,
    E.FIELD_1       AS OCCUPATION
  FROM CE_HOUSE_HEAD A
    INNER JOIN CE_FAMILY B ON A.FAMILY_ID = B.FAMILY_ID
    INNER JOIN CE_HOUSE_HEAD_TO_MEMBER C ON A.FAMILY_ID = C.FAMILY_ID AND A.HOUSE_HEAD_ID = C.HOUSE_HEAD_ID
    INNER JOIN CE_FAMILY_TO_MEMBER D ON A.FAMILY_ID = D.FAMILY_ID AND C.STUDENT_ID = D.STUDENT_ID
    INNER JOIN SY_FLEX_DATA E ON A.HOUSE_HEAD_ID = E.TYPE_ID
  WHERE E.FLEX_OWNER_ID = 602;

CREATE OR REPLACE FORCE VIEW VW_STUDENT AS
  SELECT
    DISTINCT
    (A.STUDENT_ID),
    A.STUDENT_ID AS EXT_STUDENT_NUMBER,
    A.FIRST_NAME_CANON,
    A.FIRST_NAME,
    A.MIDDLE_NAME,
    A.LAST_NAME_CANON,
    A.LAST_NAME,
    A.GENDER   AS GENDER_VALUE,
    A.DATE_OF_BIRTH,
    A.SSN,
    A.INACTIVE_IND,
    A.LIMITED_ENGLISH_IND,
    A.IMMIGRANT_IND,
    A.PREVIOUS_ID_NUMBER,
    A.CREATED_BY,
    A.CREATE_TS,
    A.UPDATED_BY,
    A.UPDATE_TS,
    B.FIELD_16 AS IMPEDIMENTO_PRIMARIO,
    b.field_21 AS STUDENT_TYPE,
    c.ethnic_cd,
    CASE c.ethnic_cd
    WHEN 2
      THEN 'Blanco no Hispano'
    WHEN 5
      THEN 'Indio Americano/Nativo de Alaska'
    WHEN 6
      THEN 'Nativo Hawaiano/Islas del Pacífico'
    WHEN 7
      THEN 'Puertorriqueño'
    WHEN 8
      THEN 'Hispano no Puertorriqueño'
    WHEN 9
      THEN 'Negro o Afroamericano'
    WHEN 10
      THEN 'Asiatico'
    END        AS ETHNIC_CODE,
    RESIDENTIAL_STATUS_CD AS CITIZENSHIP,
    J.NAME     AS LANGUAGE_DESCRIPTION,
    J.VALUE    AS LANGUAGE
  FROM CE_FAMILY_MEMBER A
    LEFT JOIN SY_FLEX_DATA B ON a.STUDENT_ID = B.TYPE_ID
    LEFT JOIN CE_FAMILY_MEMBER_ETHNIC_CODE C ON A.STUDENT_ID = C.STUDENT_ID
    LEFT JOIN CE_FAMILY_MEMBER_LANGUAGE_CODE I ON A.STUDENT_ID = I.STUDENT_ID
    LEFT JOIN ENUM_CE_LANGUAGE_CODE J ON I.LANGUAGE_CD = J.VALUE
  WHERE A.INACTIVE_IND = 0
        AND (C.SEQ = 1 OR C.SEQ IS NULL)
        AND B.FLEX_OWNER_ID = 603
        AND ((I.SEQ = 1 AND J.IS_ACTIVE_IND = 1) OR I.SEQ IS NULL);

CREATE OR REPLACE VIEW VW_STUDENT_ADDRESS AS
  SELECT
    a.family_id,
    C.STUDENT_ID,
    D.EXT_STUDENT_NUMBER,
    a.address_line_1             AS POSTAL_ADDRESS_1,
    a.address_line_2             AS POSTAL_ADDRESS_2,
    a.city                       AS POSTAL_CITY,
    a.state                      AS POSTAL_STATE,
    A.ZIP_CODE                   AS POSTAL_ZIPCODE,
    (SELECT DISTINCT VALUE
     FROM ENUM_MAP_COUNTY_ZIPCODE
     WHERE ZIPCODE = A.ZIP_CODE) AS POSTAL_CITY_CODE,
    B.FIELD_3                    AS PHYSICAL_ADDRESS_1,
    B.FIELD_4                    AS PHYSICAL_ADDRESS_2,
    B.FIELD_5                    AS PHYSICAL_CITY,
    B.FIELD_9                    AS PHYSICAL_STATE,
    B.FIELD_6                    AS PHYSICAL_ZIPCODE,
    (SELECT DISTINCT VALUE
     FROM ENUM_MAP_COUNTY_ZIPCODE
     WHERE ZIPCODE = B.FIELD_6)  AS PHYSICAL_CITY_CODE
  FROM CE_FAMILY A
    LEFT JOIN SY_FLEX_DATA B ON A.FAMILY_ID = B.TYPE_ID AND B.FLEX_OWNER_ID = 601
    LEFT JOIN CE_FAMILY_TO_MEMBER C ON A.FAMILY_ID = C.FAMILY_ID
    LEFT JOIN CE_FAMILY_MEMBER D ON D.STUDENT_ID = C.STUDENT_ID
  WHERE C.LIVES_WITH_IND = 1
        AND C.PRIMARY_FAMILY_IND = 1;

CREATE OR REPLACE VIEW VW_REGIONS AS
  SELECT
    DISTRICT_ZONE_ID AS REGION_ID,
    EXT_ZONE_NUMBER,
    NAME,
    DESCRIPTION
  FROM SY_DISTRICT_ZONE
  WHERE DISTRICT_NUMBER = 1000 AND IS_ACTIVE_IND = 1 AND DISTRICT_ZONE_ID NOT IN (973, 974, 993);

CREATE OR REPLACE VIEW VW_SCHOOLS AS
  SELECT
    S.SCHOOL_ID,
    S.EXT_SCHOOL_NUMBER,
    S.CAMPUS_ID                           AS DISTRICT_ID,
    C.DESCRIPTION                         AS DISTRICT_NAME,
    C.DISTRICT_ZONE_ID                    AS REGION_ID,
    D.DESCRIPTION                         AS REGION_NAME,
    S.SCHOOL_NAME,
    ET.VALUE                              AS SCHOOL_TYPE_CD,
    ET.DESCRIPTION                        AS SCHOOL_TYPE,
    (CASE WHEN (FIELD_36 IS NOT NULL)
      THEN 1
     ELSE 0 END)                          AS IS_VOCATIONAL,
    S.ADDRESS_LINE_1,
    S.ADDRESS_LINE_2,
    CC.VALUE                              AS CITY_CD,
    CC.DESCRIPTION                        AS CITY,
    S.COUNTRY,
    S.STATE,
    S.ZIP_CODE,
    S.EMAIL,
    (S.PHONE_AREA_CODE || S.PHONE_NUMBER) AS PHONE
  FROM SY_SCHOOL S
    INNER JOIN SY_CAMPUS C ON S.CAMPUS_ID = C.CAMPUS_ID AND C.IS_ACTIVE_IND = 1
    INNER JOIN SY_DISTRICT_ZONE D ON C.DISTRICT_ZONE_ID = D.DISTRICT_ZONE_ID AND D.IS_ACTIVE_IND = 1
    INNER JOIN ENUM_SY_SCHOOL_TYPE ET ON S.SCHOOL_TYPE_CD = ET.VALUE
    INNER JOIN ENUM_CE_COUNTY_CODE CC ON S.COUNTY_CD = CC.VALUE AND CC.IS_ACTIVE_IND = 1
    INNER JOIN SY_FLEX_DATA FD ON FD.FLEX_DATA_ID = (SELECT MAX(FDI.FLEX_DATA_ID) AS FLEX_DATA_ID
                                                     FROM SY_FLEX_DATA FDI
                                                     WHERE FDI.TYPE_ID = S.SCHOOL_ID AND FDI.FLEX_OWNER_ID = 604)
  WHERE S.SCHOOL_ID NOT IN (SELECT DISTINCT SCHOOL_ID
                            FROM SY_SCHOOLS_CLOSED_2018_2019)
        AND S.IS_ACTIVE_IND = 1
        AND C.DISTRICT_ZONE_ID < 600;


CREATE OR REPLACE VIEW VW_SPECIALIZED_SCHOOLS AS
  SELECT
    S.SCHOOL_ID,
    S.EXT_SCHOOL_NUMBER,
    S.CAMPUS_ID                           AS DISTRICT_ID,
    C.DESCRIPTION                         AS DISTRICT_NAME,
    C.DISTRICT_ZONE_ID                    AS REGION_ID,
    D.DESCRIPTION                         AS REGION_NAME,
    S.SCHOOL_NAME,
    ET.VALUE                              AS SCHOOL_TYPE_CD,
    ET.DESCRIPTION                        AS SCHOOL_TYPE,
    (CASE WHEN (FIELD_36 IS NOT NULL)
      THEN 1
     ELSE 0 END)                          AS IS_VOCATIONAL,
    (CASE
     WHEN TRIM(ESC_BELLAS_ARTES) = 'true' OR TRIM(ESC_MUSICA) = 'true'
       THEN 'Bellas Artes (Cinematografía, Música y Radio y Televisión)'
     WHEN TRIM(ESC_CIENCIAS_MATEMATICAS) = 'true'
       THEN 'STEM (Ciencias y Matemáticas)'
     WHEN TRIM(ESC_CURR_METODO_MONTESSORI) = 'true'
       THEN 'Montessori'
     WHEN TRIM(ESC_BILINGUE) = 'true'
       THEN 'Bilingüe e Idiomas'
     ELSE 'NONE'
     END)                                 AS SPECIALIZED_CATEGORY,
    (CASE
     WHEN TRIM(ESC_BELLAS_ARTES) = 'true' OR TRIM(ESC_MUSICA) = 'true'
       THEN 'FINE_ARTS'
     WHEN TRIM(ESC_CIENCIAS_MATEMATICAS) = 'true'
       THEN 'SCIENCE_AND_MATHEMATHICS'
     WHEN TRIM(ESC_CURR_METODO_MONTESSORI) = 'true'
       THEN 'MONTESSORI'
     WHEN TRIM(ESC_BILINGUE) = 'true'
       THEN 'BILINGUE'
     ELSE 'NONE'
     END)                                 AS SPECIALIZED_CATEGORY_CODE,
    S.ADDRESS_LINE_1,
    S.ADDRESS_LINE_2,
    CC.VALUE                              AS CITY_CD,
    CC.DESCRIPTION                        AS CITY,
    S.COUNTRY,
    S.STATE,
    S.ZIP_CODE,
    S.EMAIL,
    (S.PHONE_AREA_CODE || S.PHONE_NUMBER) AS PHONE
  FROM SY_SCHOOL S
    INNER JOIN SCHOOL_DIRECTORY SD ON S.EXT_SCHOOL_NUMBER = SD.SCHOOL_NUMBER
    LEFT JOIN SY_CAMPUS C ON S.CAMPUS_ID = C.CAMPUS_ID AND C.IS_ACTIVE_IND = 1
    LEFT JOIN SY_DISTRICT_ZONE D ON C.DISTRICT_ZONE_ID = D.DISTRICT_ZONE_ID AND D.IS_ACTIVE_IND = 1
    LEFT JOIN ENUM_SY_SCHOOL_TYPE ET ON S.SCHOOL_TYPE_CD = ET.VALUE
    LEFT JOIN ENUM_CE_COUNTY_CODE CC ON S.COUNTY_CD = CC.VALUE AND CC.IS_ACTIVE_IND = 1
    LEFT JOIN SY_FLEX_DATA FD ON S.SCHOOL_ID = FD.TYPE_ID AND FD.FLEX_OWNER_ID = 604
  WHERE TRIM(ESC_ESPECIALIZADA) = 'true' OR TRIM(SD.ESC_CURR_ESPECIALIZADO) = 'true';


CREATE OR REPLACE VIEW VW_SCHOOLS_GRADE_LEVELS AS
  SELECT
    NAME,
    DESCRIPTION,
    VALUE,
    SCHOOL_ID,
    SCHOOL_YEAR,
    NEXT_YEAR_GRADE
  FROM ENUM_SY_SCHOOL_GRADE_LEVEL
  WHERE IS_ACTIVE_IND = 1;


CREATE OR REPLACE FORCE VIEW VW_SIE_NYE_STUDENT_ENROLLMENT AS
  SELECT
    E.SCHOOL_ID,
    E.SCHOOL_YEAR,
    E.GRADE_LEVEL,
    E.SUPPLEMENT_EDU_SVC_IND,
    E.STUDENT_ID,
    e.enrollment_id,
    E.COUNSELOR_ID  AS "COUNSERLOR_STAFF_ID",
    /*Q.FIRST_NAME    AS "COUNSERLOR_FIRST_NAME",
    Q.LAST_NAME     AS "COUNSERLOR_LAST_NAME",*/
    E.ENTRY_CD,
    p.NAME          AS "ENTRY_CD_DESC",
    e.ada_eligible_ind,
    e.begin_enrollment_date,
    e.end_enrollment_date,
    e.end_status_cd,
    E.CREATED_BY    AS "ENROLL_CREATED_BY",
    E.CREATE_TS     AS "ENROLL_CREATE_TS",
    E.UPDATED_BY    AS "ENROLL_UPDATED_BY",
    E.UPDATE_TS     AS "ENROLL_UPDATE_TS",
    N.NAME          AS "END_STATUS_DESC",
    decode(e.state_aid_category_cd, 1, 'VOC',
           0, NULL) AS "SPECIAL_PROG_CATEGORY_CD",
    O.NAME          AS "PROGRAM_DESC"
  FROM TMP_ST_ENROLLMENT_2019 E
    LEFT JOIN ENUM_ST_END_STATUS_CODE N ON E.END_STATUS_CD = N.VALUE AND E.SCHOOL_YEAR = N.SCHOOL_YEAR
    LEFT JOIN ENUM_ST_SPECIAL_PRG_CATEGORY O ON E.SPECIAL_PROG_CATEGORY_CD = O.VALUE
    LEFT JOIN ENUM_ST_ENTRY_CODE P ON E.ENTRY_CD = P.VALUE
  WHERE ADA_ELIGIBLE_IND = 1 AND E.SCHOOL_ID NOT IN (SELECT DISTINCT SCHOOL_ID
                                                     FROM SY_SCHOOLS_CLOSED_2018_2019);


CREATE OR REPLACE VIEW VW_VOCATIONAL_SCHOOLS AS
  SELECT
    S.SCHOOL_ID,
    S.EXT_SCHOOL_NUMBER,
    S.CAMPUS_ID                           AS DISTRICT_ID,
    C.DESCRIPTION                         AS DISTRICT_NAME,
    C.DISTRICT_ZONE_ID                    AS REGION_ID,
    D.DESCRIPTION                         AS REGION_NAME,
    S.SCHOOL_NAME,
    ET.VALUE                              AS SCHOOL_TYPE_CD,
    ET.DESCRIPTION                        AS SCHOOL_TYPE,
    S.ADDRESS_LINE_1,
    S.ADDRESS_LINE_2,
    CC.VALUE                              AS CITY_CD,
    CC.DESCRIPTION                        AS CITY,
    S.COUNTRY,
    S.STATE,
    S.ZIP_CODE,
    S.EMAIL,
    (S.PHONE_AREA_CODE || S.PHONE_NUMBER) AS PHONE
  FROM SY_SCHOOL S
    INNER JOIN SY_CAMPUS C ON S.CAMPUS_ID = C.CAMPUS_ID AND C.IS_ACTIVE_IND = 1
    INNER JOIN SY_DISTRICT_ZONE D ON C.DISTRICT_ZONE_ID = D.DISTRICT_ZONE_ID AND D.IS_ACTIVE_IND = 1
    INNER JOIN ENUM_SY_SCHOOL_TYPE ET ON S.SCHOOL_TYPE_CD = ET.VALUE
    INNER JOIN ENUM_CE_COUNTY_CODE CC ON S.COUNTY_CD = CC.VALUE AND CC.IS_ACTIVE_IND = 1
  WHERE S.IS_ACTIVE_IND = 1
        AND S.SCHOOL_ID NOT IN (SELECT DISTINCT SCHOOL_ID
                                FROM SY_SCHOOLS_CLOSED_2018_2019)
        AND S.EXT_SCHOOL_NUMBER IN (SELECT DISTINCT EXT_SCHOOL_NUMBER
                                    FROM VC_PROGRAMS)
        AND C.DISTRICT_ZONE_ID < 600
  ORDER BY SCHOOL_NAME;


CREATE OR REPLACE FORCE VIEW VW_TECHNICAL_SCHOOLS AS
  SELECT
    S.SCHOOL_ID,
    S.EXT_SCHOOL_NUMBER,
    S.CAMPUS_ID                           AS DISTRICT_ID,
    C.DESCRIPTION                         AS DISTRICT_NAME,
    C.DISTRICT_ZONE_ID                    AS REGION_ID,
    D.DESCRIPTION                         AS REGION_NAME,
    S.SCHOOL_NAME,
    ET.VALUE                              AS SCHOOL_TYPE_CD,
    ET.DESCRIPTION                        AS SCHOOL_TYPE,
    S.ADDRESS_LINE_1,
    S.ADDRESS_LINE_2,
    CC.VALUE                              AS CITY_CD,
    CC.DESCRIPTION                        AS CITY,
    S.COUNTRY,
    S.STATE,
    S.ZIP_CODE,
    S.EMAIL,
    (S.PHONE_AREA_CODE || S.PHONE_NUMBER) AS PHONE
  FROM SY_SCHOOL S
    INNER JOIN SY_CAMPUS C ON S.CAMPUS_ID = C.CAMPUS_ID AND C.IS_ACTIVE_IND = 1
    INNER JOIN SY_DISTRICT_ZONE D ON C.DISTRICT_ZONE_ID = D.DISTRICT_ZONE_ID AND D.IS_ACTIVE_IND = 1
    INNER JOIN ENUM_SY_SCHOOL_TYPE ET ON S.SCHOOL_TYPE_CD = ET.VALUE
    INNER JOIN ENUM_CE_COUNTY_CODE CC ON S.COUNTY_CD = CC.VALUE AND CC.IS_ACTIVE_IND = 1
  WHERE S.IS_ACTIVE_IND = 1
        AND S.EXT_SCHOOL_NUMBER IN (SELECT DISTINCT EXT_SCHOOL_NUMBER
                                    FROM VC_PROGRAMS
                                    WHERE IS_INSTITUTE_IND = 1)
        AND S.SCHOOL_ID NOT IN (SELECT DISTINCT SCHOOL_ID
                                FROM SY_SCHOOLS_CLOSED_2018_2019)
        AND C.DISTRICT_ZONE_ID < 600
  ORDER BY SCHOOL_NAME;

CREATE OR REPLACE VIEW VW_VOCATIONAL_PROGRAMS AS
  SELECT DISTINCT
    VS.SCHOOL_ID,
    2018                         AS SCHOOL_YEAR,
    GET_CANON_NAME(PROGRAM_NAME) AS CODE,
    PROGRAM_NAME                 AS DESCRIPTION,
    PROGRAM_NAME                 AS LONG_DESCRIPTION
  FROM VC_PROGRAMS VC
    LEFT JOIN VW_VOCATIONAL_SCHOOLS VS ON VS.EXT_SCHOOL_NUMBER = VC.EXT_SCHOOL_NUMBER
  ORDER BY PROGRAM_NAME;


CREATE OR REPLACE FUNCTION "GET_SOUNDLIKE_NAME"("P_NAME" IN VARCHAR2)
  RETURN NUMBER IS
  --initialize variables here
  v_soundlike NUMBER;
  v_trimname  VARCHAR2(50) := NULL;
  -- main body
  BEGIN v_trimname := RTRIM(LTRIM(p_name));
    IF LENGTH(v_trimname) = 0
    THEN
      RETURN TO_NUMBER(NULL);
    ELSE
      v_soundlike := ((ascii(substr(soundex(v_trimname), 1, 1)) - 64) * 1000) +
                     (to_number(substr(soundex(v_trimname), 2))); END IF;
    RETURN v_soundlike;
    EXCEPTION
    WHEN OTHERS
    THEN
      RETURN NULL;
  END;

CREATE OR REPLACE FUNCTION GET_CANON_NAME(P_NAME IN VARCHAR2)
  RETURN VARCHAR2 IS

  --initialize variables here
  v_canon      VARCHAR2(50);
  v_length     NUMBER := 0;
  v_trimucname VARCHAR2(50) := NULL;

  BEGIN
    v_trimucname := UPPER(RTRIM(LTRIM(p_name)));
    v_length := LENGTH(v_trimucname);

    IF v_length = 0
    THEN
      RETURN TO_CHAR(NULL);
    ELSE
      v_canon := TRANSLATE(v_trimucname, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 @!#$%&()*+-./<>''^',
                           'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789');
    END IF;

    RETURN v_canon;

    EXCEPTION
    WHEN OTHERS
    THEN
      RETURN NULL;

  END;

CREATE OR REPLACE FUNCTION CLEAN_NAME(P_NAME IN VARCHAR2)
  RETURN VARCHAR2 AS

  --initialize variables here
  V_CANON           VARCHAR2(50);
  LENGTH_PARAMS     NUMBER := 0;
  TRIM_UPPER_P_NAME VARCHAR2(50) := NULL;

  BEGIN
    TRIM_UPPER_P_NAME := UPPER(RTRIM(LTRIM(P_NAME)));
    LENGTH_PARAMS := LENGTH(TRIM_UPPER_P_NAME);

    IF LENGTH_PARAMS = 0
    THEN
      RETURN TO_CHAR(NULL);
    ELSE
      V_CANON := TRANSLATE(TRIM_UPPER_P_NAME, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 @!#$%&()*+-./<>''^',
                           'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789');
      V_CANON := TRANSLATE(V_CANON, 'ÁÉÍÓÚÑÜáéíóúñü', 'AEIOUNUaeiounu');
    END IF;

    RETURN V_CANON;

    EXCEPTION
    WHEN OTHERS
    THEN
      RETURN NULL;

  END;

SELECT
  SCHOOL_ID,
  STUDENT_ID,
  GRADE_LEVEL,
  COUNT(*) AS TOTAL
FROM PROD.TMP_ST_ENROLLMENT_2019
WHERE SCHOOL_ID IN (SELECT DISTINCT SCHOOL_ID
                    FROM PROD.SY_SCHOOLS_CLOSED_2018_2019)
  AND ADA_ELIGIBLE_IND = 1
GROUP BY SCHOOL_ID, STUDENT_ID, GRADE_LEVEL

SELECT COUNT(*)
FROM PROD.TMP_ST_ENROLLMENT_2019
WHERE SCHOOL_ID IN (SELECT DISTINCT SCHOOL_ID
                    FROM PROD.SY_SCHOOLS_CLOSED_2018_2019)
AND ADA_ELIGIBLE_IND = 1;

grant select on PROD.SY_SCHOOLS_CLOSED_2018_2019 to PRDE_SRS;


